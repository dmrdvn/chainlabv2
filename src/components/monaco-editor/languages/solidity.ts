import type { Monaco } from '@monaco-editor/react';

/**
 * Register Solidity language support in Monaco editor
 */
export function registerSolidityLanguage(monaco: Monaco): void {
  // Only register if not already registered
  if (!monaco.languages.getLanguages().some((lang) => lang.id === 'solidity')) {
    monaco.languages.register({ id: 'solidity' });

    // Basic Solidity syntax highlighting
    monaco.languages.setMonarchTokensProvider('solidity', {
      keywords: [
        'contract',
        'library',
        'interface',
        'function',
        'constructor',
        'event',
        'modifier',
        'using',
        'struct',
        'enum',
        'public',
        'private',
        'external',
        'internal',
        'pure',
        'view',
        'payable',
        'virtual',
        'override',
        'abstract',
        'returns',
        'return',
        'mapping',
        'memory',
        'storage',
        'calldata',
        'if',
        'else',
        'for',
        'while',
        'do',
        'break',
        'continue',
        'throw',
        'import',
        'from',
        'as',
        'try',
        'catch',
        'assembly',
        'emit',
        'delete',
        'new',
        'is',
        'this',
        'super',
        'pragma',
        'solidity',
        'var',
      ],
      typeKeywords: [
        'address',
        'bool',
        'string',
        'int',
        'uint',
        'byte',
        'bytes',
        'bytes1',
        'bytes2',
        'bytes3',
        'bytes4',
        'bytes5',
        'bytes6',
        'bytes7',
        'bytes8',
        'bytes9',
        'bytes10',
        'bytes11',
        'bytes12',
        'bytes13',
        'bytes14',
        'bytes15',
        'bytes16',
        'bytes17',
        'bytes18',
        'bytes19',
        'bytes20',
        'bytes21',
        'bytes22',
        'bytes23',
        'bytes24',
        'bytes25',
        'bytes26',
        'bytes27',
        'bytes28',
        'bytes29',
        'bytes30',
        'bytes31',
        'bytes32',
        'int8',
        'int16',
        'int24',
        'int32',
        'int40',
        'int48',
        'int56',
        'int64',
        'int72',
        'int80',
        'int88',
        'int96',
        'int104',
        'int112',
        'int120',
        'int128',
        'int136',
        'int144',
        'int152',
        'int160',
        'int168',
        'int176',
        'int184',
        'int192',
        'int200',
        'int208',
        'int216',
        'int224',
        'int232',
        'int240',
        'int248',
        'int256',
        'uint8',
        'uint16',
        'uint24',
        'uint32',
        'uint40',
        'uint48',
        'uint56',
        'uint64',
        'uint72',
        'uint80',
        'uint88',
        'uint96',
        'uint104',
        'uint112',
        'uint120',
        'uint128',
        'uint136',
        'uint144',
        'uint152',
        'uint160',
        'uint168',
        'uint176',
        'uint184',
        'uint192',
        'uint200',
        'uint208',
        'uint216',
        'uint224',
        'uint232',
        'uint240',
        'uint248',
        'uint256',
        'fixed',
        'ufixed',
      ],
      constants: [
        'true',
        'false',
        'wei',
        'gwei',
        'ether',
        'seconds',
        'minutes',
        'hours',
        'days',
        'weeks',
        'years',
      ],
      operators: [
        '=',
        '>',
        '<',
        '!',
        '~',
        '?',
        ':',
        '==',
        '<=',
        '>=',
        '!=',
        '&&',
        '||',
        '++',
        '--',
        '+',
        '-',
        '*',
        '/',
        '&',
        '|',
        '^',
        '%',
        '<<',
        '>>',
        '>>>',
        '+=',
        '-=',
        '*=',
        '/=',
        '&=',
        '|=',
        '^=',
        '%=',
        '<<=',
        '>>=',
        '>>>=',
      ],
      symbols: /[=><!~?:&|+\-*^%]+/,
      escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      tokenizer: {
        root: [
          [
            /[a-z_$][\w$]*/,
            {
              cases: {
                '@typeKeywords': 'keyword.type',
                '@keywords': 'keyword',
                '@constants': 'constant',
                '@default': 'identifier',
              },
            },
          ],
          [/[A-Z][\w$]*/, 'type.identifier'],
          { include: '@whitespace' },
          [/[{}()[\]]/, '@brackets'],
          [/[<>](?!@symbols)/, '@brackets'],
          [
            /@symbols/,
            {
              cases: {
                '@operators': 'operator',
                '@default': '',
              },
            },
          ],
          [/\d*\.\d+([eE][-+]?\d+)?/, 'number.float'],
          [/0[xX][0-9a-fA-F]+/, 'number.hex'],
          [/\d+/, 'number'],
          [/[;,.]/, 'delimiter'],
          [/"([^"\\]|\\.)*$/, 'string.invalid'],
          [/"/, { token: 'string.quote', bracket: '@open', next: '@string' }],
        ],
        comment: [
          [/[^/*]+/, 'comment'],
          [/\/\*/, 'comment', '@push'],
          ['\\*/', 'comment', '@pop'],
          [/[/*]/, 'comment'],
        ],
        string: [
          [/[^\\"]+/, 'string'],
          [/@escapes/, 'string.escape'],
          [/\\./, 'string.escape.invalid'],
          [/"/, { token: 'string.quote', bracket: '@close', next: '@pop' }],
        ],
        whitespace: [
          [/[ \t\r\n]+/, 'white'],
          [/\/\*/, 'comment', '@comment'],
          [/\/\/.*$/, 'comment'],
        ],
      },
    });

    // Solidity code auto completion and bracket matching
    monaco.languages.setLanguageConfiguration('solidity', {
      comments: {
        lineComment: '//',
        blockComment: ['/*', '*/'],
      },
      brackets: [
        ['{', '}'],
        ['[', ']'],
        ['(', ')'],
      ],
      autoClosingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
      ],
      surroundingPairs: [
        { open: '{', close: '}' },
        { open: '[', close: ']' },
        { open: '(', close: ')' },
        { open: '"', close: '"' },
        { open: "'", close: "'" },
      ],
      folding: {
        markers: {
          start: new RegExp('^\\s*//\\s*#?region\\b'),
          end: new RegExp('^\\s*//\\s*#?endregion\\b'),
        },
      },
    });
  }
}
