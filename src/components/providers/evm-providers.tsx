'use client';

import { ReactNode } from 'react';
import { WagmiProvider, createConfig, http } from 'wagmi';
import {
  mainnet,
  sepolia,
  polygon,
  polygonMumbai,
  bsc,
  bscTestnet,
  goerli,
  arbitrum,
  arbitrumGoerli,
  arbitrumNova,
  aurora,
  auroraTestnet,
  avalanche,
  avalancheFuji,
  base,
  baseGoerli,
  boba,
  bronos,
  bronosTestnet,
  bxn,
  bxnTestnet,
  canto,
  celo,
  celoAlfajores,
  classic,
  confluxESpace,
  cronos,
  cronosTestnet,
  crossbell,
  dfk,
  dogechain,
  edgeware,
  edgewareTestnet,
  eos,
  eosTestnet,
  ekta,
  ektaTestnet,
  evmos,
  evmosTestnet,
  fantom,
  fantomTestnet,
  fibo,
  filecoin,
  filecoinCalibration,
  filecoinHyperspace,
  flare,
  flareTestnet,
  fuse,
  fuseSparknet,
  gobi,
  gnosis,
  gnosisChiado,
  haqqMainnet,
  haqqTestedge2,
  harmonyOne,
  iotex,
  iotexTestnet,
  klaytn,
  linea,
  lineaTestnet,
  mantle,
  mantleTestnet,
  metis,
  metisGoerli,
  mev,
  mevTestnet,
  modeTestnet,
  moonbaseAlpha,
  moonbeam,
  moonriver,
  neonDevnet,
  neonMainnet,
  nexilix,
  nexi,
  oasys,
  okc,
  optimism,
  optimismGoerli,
  polygonZkEvm,
  polygonZkEvmTestnet,
  pulsechain,
  pulsechainV4,
  qMainnet,
  qTestnet,
  rollux,
  rolluxTestnet,
  ronin,
  saigon,
  scrollSepolia,
  shardeumSphinx,
  skaleCalypso,
  skaleCalypsoTestnet,
  skaleCryptoBlades,
  skaleCryptoColosseum,
  skaleEuropa,
  skaleEuropaTestnet,
  skaleExorde,
  skaleHumanProtocol,
  skaleNebula,
  skaleNebulaTestnet,
  skaleRazor,
  skaleTitan,
  skaleTitanTestnet,
  syscoin,
  songbird,
  taikoTestnetSepolia,
  taraxa,
  taraxaTestnet,
  telos,
  telosTestnet,
  thunderTestnet,
  wanchain,
  wanchainTestnet,
  xdc,
  xdcTestnet,
  zetachainAthensTestnet,
  zkSync,
  zora,
  zoraSepolia,
  baseSepolia,
} from 'wagmi/chains';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { injected, metaMask, safe, walletConnect } from 'wagmi/connectors';

const WALLETCONNECT_PROJECT_ID = process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID || '';
if (!WALLETCONNECT_PROJECT_ID) {
  console.warn(
    'WalletConnect projectId is not set for EVM providers. WalletConnect functionality will be limited.'
  );
}

const definedChains = [
  mainnet,
  sepolia,
  polygon,
  polygonMumbai,
  bsc,
  bscTestnet,
  baseSepolia,
  goerli,
  arbitrum,
  arbitrumGoerli,
  arbitrumNova,
  aurora,
  auroraTestnet,
  avalanche,
  avalancheFuji,
  base,
  baseGoerli,
  boba,
  bronos,
  bronosTestnet,
  bxn,
  bxnTestnet,
  canto,
  celo,
  celoAlfajores,
  classic,
  confluxESpace,
  cronos,
  cronosTestnet,
  crossbell,
  dfk,
  dogechain,
  edgeware,
  edgewareTestnet,
  eos,
  eosTestnet,
  ekta,
  ektaTestnet,
  evmos,
  evmosTestnet,
  fantom,
  fantomTestnet,
  fibo,
  filecoin,
  filecoinCalibration /* filecoinHyperspace - genelde calibration kullanılır */,
  flare /* flareTestnet - songbird ve coston/coston2 daha yaygın */,
  fuse,
  fuseSparknet,
  gobi,
  gnosis,
  haqqMainnet,
  haqqTestedge2,
  harmonyOne,
  iotex,
  iotexTestnet,
  klaytn,
  linea,
  lineaTestnet,
  mantle,
  mantleTestnet,
  metis,
  metisGoerli,
  mev,
  mevTestnet,
  modeTestnet,
  moonbaseAlpha,
  moonbeam,
  moonriver,
  neonDevnet,
  neonMainnet,
  nexilix,
  nexi,
  oasys,
  okc,
  optimism,
  optimismGoerli,
  polygonZkEvm,
  polygonZkEvmTestnet,
  pulsechain,
  pulsechainV4,
  qMainnet,
  qTestnet,
  rollux,
  rolluxTestnet,
  ronin,
  saigon,
  scrollSepolia,
  shardeumSphinx,
  skaleCalypso,
  skaleCalypsoTestnet,
  skaleCryptoBlades,
  skaleCryptoColosseum,
  skaleEuropa,
  skaleEuropaTestnet,
  skaleExorde,
  skaleHumanProtocol,
  skaleNebula,
  skaleNebulaTestnet,
  skaleRazor,
  skaleTitan,
  skaleTitanTestnet,
  syscoin,
  songbird,
  taikoTestnetSepolia,
  taraxa,
  taraxaTestnet,
  telos,
  telosTestnet,
  thunderTestnet,
  wanchain,
  wanchainTestnet,
  xdc,
  xdcTestnet,
  zetachainAthensTestnet,
  zkSync,
  zora,
  zoraSepolia,
].filter(Boolean);

// Create a Wagmi config
const wagmiConfig = createConfig({
  chains: definedChains as any,
  connectors: [
    injected(),
    walletConnect({ projectId: WALLETCONNECT_PROJECT_ID }),
    metaMask(),
    safe(),
  ],
  transports: definedChains.reduce(
    (acc, chain) => {
      if (chain && chain.id) {
        acc[chain.id] = http();
      }
      return acc;
    },
    {} as Record<number, ReturnType<typeof http>>
  ),
  ssr: true,
});

// Create a react-query client
const queryClient = new QueryClient();

interface EvmWalletProvidersProps {
  children: ReactNode;
}

export function EvmWalletProviders({ children }: EvmWalletProvidersProps) {
  return (
    <WagmiProvider config={wagmiConfig}>
      <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
    </WagmiProvider>
  );
}
